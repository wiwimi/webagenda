/* Generated by Together */

package ProblemDomain;

/**
 * All employees have a set of permission settings that determine what levels of access they have within the system. 
 */
public class PermissionSet {
    /**
     * Each collection of unique permission settings are tied to a specific permission level number.  Employee permissions are determines by setting them to a permission level, rather than having to set all permission settings individually for each employee. 
     */
    private int plevel;

    /**
     * Employee can access times on a schedule under their
     * name and lower plevels for the current date or period. 
     */
    private boolean canReadSched;

    /**
     * Employee is able to access archived schedules that have ened before the current date. 
     */
    private boolean canReadOldSched;

    /**
     * Sets whether or not the employee is able to edit schedules, either by creating new ones or by editing future schedules that have not yet come into effect. 
     */
    private boolean canEditSched;

    /**
     * Sets whether or not the employee is able to view employee resources, such as employees that are available, booked off, or are already working at a given time. 
     */
    private boolean canViewResources;

    /**
     * Sets whether or not the employee is able to change the permission settings of other employees that are below their permission level. 
     */
    private boolean canChangePermissions;

    /**
     * Sets whether or not the employee is able to view system logs. 
     */
    private boolean canReadLogs;

    /**
     * Sets whether or not the employee can access the reporting system, allowing them to both generate and distribute reports. 
     */
    private boolean canAccessReports;

    /**
     * Sets whether or not the employee is able to request days off. 
     */
    private boolean canRequestDaysOff;

    /**
     * Sets the maximum number of days off that an employee can request for a given schedule period.  This value will only be accessed if the employee already has permission to request days off. 
     */
    private int maxDaysOff;

    /**
     * Sets whether or not the employee is able to take vacation days. 
     */
    private boolean canTakeVacations;

    /**
     * Determines the maximum number of vacation days that an employee can take off over a schedule period, assuming they have the required permission for vacation days. 
     */
    private int maxVacationDays;

    /**
     * Sets whether or not the employee is able to take emergency days off.  This will be on by default, but can be turned off if desired. 
     */
    private boolean canTakeEmergencyDays;

    /**
     * Sets whether or not the employee can view details on inactive employees who are not currently working, such as ones that have left the company.  This is primarily used for reports and auditing. 
     */
    private boolean canViewInactiveEmps;

    /**
     * Sets whether or not the employee can send notifications which are messages internal to the system that can be sent to specific employees, workgroups, or job types. 
     */
    private boolean canSendNotifications;

    /**
     * Similar to a permission promotion (which canot be given by self), trusted is a permission that allows any employee to perform actions that affect the next highest level without requiring authorization from a superior.  However, a notification will be sent notifying the supervisor (n/a if highest plevel) explaining actions.  This only applies to permissions that are currently enabled. Ex: If an employee cannot book days off, a trusted employee canot book days off either. 
     */
    private boolean trusted;

    /**
     * Starting with 0 as the highest priority employee and then incrementing, this differentiates seniority within the same plevel. 
     */
    private int preferredRank;
}
