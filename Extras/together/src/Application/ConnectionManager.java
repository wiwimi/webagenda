/* Generated by Together */

package Application;

/**
 * Provides functionality for creating database connections, which are then used by broker classes to manipulate data in the database. 
 */
public class ConnectionManager {
    /**
     * Returns an initialized connection instance wrapped in WebAgenda's DBConnection object for use with Broker objects for connecting to database and performing statements. Instances are controlled by Brokers so memory usage doesn't spiral out of control when the database is it with many connection requests. 
     */
    public Connection getConnection() {
    }

    /**
     * Attempts to get connection configuration information from an external properties file. 
     */
    private void getFileSettings() {
    }

    /**
     * Database user that accesses WebAgenda data. Defaults to WABroker. 
     */
    private String db_user;

    /**
     * Password that is used for database user. 
     */
    private String db_pass;

    /**
     * Database table that holds WebAgenda data. Methods will fail if this is inaccurate. 
     */
    private String db_name;

    /**
     * Driver for accessing tables and data. Defaults to MySQL driver included. 
     */
    private String db_driver;

    /**
     * Driver instance, holds an instance of the driver so memory isn't wasted re-creating the instance whenever a connection is required. 
     */
    private Object db_drv_instance;

    /**
     * Driver information string that determines port and host and table name used in the connection. 
     */
    private String db_url;

    /**
     * Flag for whether or not the currently held connection settings are from the properties file. 
     */
    private boolean hasSettings;

    /**
     * @clientCardinality 1
     * @clientQualifier creates
     * @supplierQualifier is created by
     * @supplierCardinality 0..* 
     */
    private DBConnection lnkDBConnection;
}
