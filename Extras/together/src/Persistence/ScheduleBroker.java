/* Generated by Together */

package Persistence;

import Business.Schedule;

/**
 * Provides functionality for accessing schedule data from the database. 
 */
public class ScheduleBroker {
    /**
     * Gets the default schedule for a specified date range for all employees that work under the supervisor. 
     */
    public Schedule getDefault(String p0, String p1){}

    /**
     * Gets a collection of all schedules that currently exist for the supervisor, limited to a given date range. 
     */
    public Schedule[] getSchedules(String startDate, String endDate){}

    /**
     * Sets the schedule for a certain day (the string param is a date) with the shift[] 's specified. 
     */
    protected void setSchedule(String p0, Shift[] p1){}

    /**
     * Returns a blank schedule using a start date and end date for length. 
     */
    public Schedule getBlankSchedule(String p0, String p1){}

    public Schedule getBlankSchedule(){}

    /**
     * Returns an array of same-length blank schedules. 
     */
    public void getBlankSchedules(int p0, String p1, String p2){}

    /**
     * Takes an array of schedules and adds the shifts of all into one, which is returned. 
     */
    public Schedule mergeSchedule(Schedule[] p0){}

    /**
     * Clears a schedule by removing all shifts 
     */
    public void clearSchedule(Schedule p0){}

    /**
     * Set the number of days off an employee can take 
     */
    public void setAllowableDaysOff(int p0, int p1){}

    private void writeSchedule(Schedule p0){}

    /**
     * Send a schedule into pending mode so it will be written and can be retrieved. Is not active yet even if written. 
     */
    protected void pendingWrite(Schedule p0){}

    /**
     * Sets a schedules duration over the specified dates. It is possible thatroom is left or cut off 
     */
    public void setSchedule(Schedule p0, Schedule p1){}

    /**
     * Schedule that is pending being written can be failed, so it will not be written.
     */
    private void failPendingSchedule(Schedule p0){}

    /**
     * Returns all schedules that have a duration in between the dates specified. 
     */
    public Schedule[] searchSchedulesByDate(String p0, String p1){}

    /**
     * Get all schedules created by employee from their id 
     */
    public Schedule[] searchSchedulesByCreator(int p0){}

    /**
     * Returns all schedules that have a duration on the date specified. 
     */
    public Schedule[] searchSchedulesByDate(String p0){}

    /**
     * Returns all schedules that are active at the current date 
     */
    public Schedule[] searchSchedulesNow(){}

    /**
     * Get a schedule's creator from the schedule itself. 
     */
    public void getScheduleCreator(Schedule p0){}

    /**
     * Returns all the schedules that have been created by employees specified by their id that are active 
     */
    public Schedule[] searchSchedulesNowByCreators(int[] p0){}

    /**
     * Returns all the schedules that are active that the following employee ids are involved in 
     */
    public Schedule[] searchSchedulesNowByEmployees(int[] p0){}

    /**
     * Returns all schedules from one employee 
     */
    public Schedule[] searchSchedulesByEmployee(int p0){}

    /**
     * Returns all schedules from all employees via their id 
     */
    public Schedule[][] searchSchedulesByEmployee(int[] p0){}

    /**
     * Returns a schedule that is saved but not active. Returns null if no edited schedule exists. 
     */
    public void getEditedSchedule(int p0){}

    /**
     * Saves a schedule as an edited schedule. Used in building blank schedules. 
     */
    public void saveScheduleAsEdit(Schedule p0){}

    /**
     * Send a schedule into pending state for a change in availability. 
     */
    public void pendingAvailability(Schedule p0){}

    public void setAvailability(Schedule p0){}
}
