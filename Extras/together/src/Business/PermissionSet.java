/* Generated by Together */

package Business;

/**
 * All employees have a set of permission settings that determine what levels of access they have within the system. 
 */
public class PermissionSet implements BusinessObject {
    /**
     * Permission level value that depicts the authority of an Employee over other employees. When a higher level employee makes a decision, it cannot be overruled by one with a lower permission. Basic heirachical permission functionality.
     */
    private int plevel;

    /**
     * Version of a PermissionLevel that depicts having the same authority of the equivalent permission level, but whose job has different permissions and therefore a different goal. Defaults to a space character, or basic version. 
     */
    private char pversion;

    /**
     * Permission that allows a user to call methods in ScheduleBroker successfully that add/edit/delete shifts and a-e-d employees from those shifts. For Automatic Scheduling to occur, this must be enabled as well. Changes can be saved with this permission.
     */
    private boolean canEditSched;

    /**
     * Permission that allows a user to view the current saved schedule. That schedule is determined by other classes, but this is true by default as the purpose of WebAgenda is to allow any user to view their schedule.
     * 
     * If an employee is contracting outside the company, but is given an account for contacting those in the business, this will always return a blank schedule unless this permission is set to false.
     */
    private boolean canReadSched;

    /**
     * canReadOldSchedule is a dependancy permission for a user to create reports (but not required) and allows viewing of schedules that are past the current date. For reference and historical value; schedules are not deleted by default, only 'de-activated'.
     */
    private boolean canReadOldSched;

    /**
     * Permission that defines if a user can modify Employee attributes including Permissions and PermissionLevel up to their current permission level - 1. In the event that a business would desire having administration that cannot modify employees, this should be set to false. That way Employee-specific administration is kept in the hands of those trusted, or those set with the task of such a job. 
     */
    private boolean canManageEmployees;

    /**
     * Permission that allows a user to view employees, their hours working, their status whether on vacation, emergency leave, shift traded, or other defined statuses. It also provides access to their availability, but no personal data other than name and job-related info.
     */
    private boolean canViewResources;

    /**
     * Permission that allows the current employee level to modify permissions of lower levels. The optimal permission level for this to work is n -2, where n is the user who can change permissions. Because a user's permission level cannot be elevated to the same level as the elevating user, so a supervisor cannot make a non-supervisor the same status as them, this will fail if used incorrectly. This permission also affects deleting and creating permissions and permission levels. If false, user cannot manage permissions in any way, regardless of level.
     */
    private boolean canChangePermissions;

    /**
     * Permission more for administrators and those interested in viewing program history for violations and irregular unexpected behavior. It also lists actions performed by users and the time they occur.
     */
    private boolean canReadLogs;

    /**
     * Permission to allow users to view and create reports. When a report is generated, it is saved to the user's account and can be sent via notifications, internal e-mail, external e-mail (it is exported first) and of course exporting to file format onto a hard drive.
     */
    private boolean canAccessReports;

    /**
     * Permission that allows a user to request days off from a higher permission level user, in most cases this will be based on their job or designated supervisor/authority, and will be dependant on their maxDaysOff and will require authentication via a notification to user's authority.
     */
    private boolean canRequestDaysOff;

    /**
     * Permission that represents the number of days off that a user has. This value is automatically refreshed every n period of days or as defined by the administrator/highest permission level. Setting the value to -1 will result in unlimited requests allowed. (Not recommended on that setting)
     */
    private int maxDaysOff;

    /**
     * Permission that is similar to the canRequestDaysOff. Part of the difference between the two is that vacations have a more positive political stigma, as some users are allowed to take 2 weeks off work. To make a request for 14 days straight as a part time or temporary employee without reason looks bad.
     * 
     * Generally vacations are only allowable for full-time employees. Booked days off do not count towards or against vacation days and vice versa.
     */
    private boolean canTakeVacations;

    /**
     * Permission that represents the number of vacation days. Similar to the maxDaysOff, this value is regenerated every period of time (assumed to be yearly). Unlike booking days off, the user does not require confirmation from superiors, but a notification is sent out so that rearrangements can be discussed. If this method does not appeal to the business, they can add more days off (via manually or by assigning different permission level variations) that count towards their vacation.
     */
    private int maxVacationDays;

    /**
     * This should always remain true for an employee unless it is abused; canTakeEmergencyDays is a permission that overrides procedures to book a day off as it is assumed that an emergency situation has occured that stops a user from coming into work. Reasons are requested when setting an emergency day off, but optional. Superiors are notified of these events so they can review reasons for the absence especially.
     */
    private boolean canTakeEmergencyDays;

    /**
     * Permission that allows a user to not only queue inactive employee profiles when making requests of the system, but also browse their resource information like a normal employee. Recommended for creating reports and sys admins.
     */
    private boolean canViewInactiveEmps;

    /**
     * Permission that allows a user to send their own notification, as opposed to a system generated notification, to a user or users. Events can be displayed this way, promotions, and other items / news.
     */
    private boolean canSendNotifications;

    /**
     * Permission that elevates a user's permissions to the elevator's level. However, since checks look at this permission as a permission, not an actual level, users that naturally have a permission level equal or higher than the user id recorded in this variable will have superiority.
     */
    private int trusted;
}
