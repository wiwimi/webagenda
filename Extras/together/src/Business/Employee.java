/* Generated by Together */

package Business;

/**
 * Holds all information for an employee, matching a record in the database.
 */
public class Employee {
    /**
     * Identifier for the user. The name employee does not reflect their position. Cannot be negative in the database.
     */
    private int empID;

    /**
     * Like employee_id, supervisor doesn't entail the position; it's the authoritative figure for the employee. Cannot be negative, if this user has no supervisor, this value should point to the employee_id.
     */
    private int supID;

    /**
     * User's first name, or preferred name. Name values cannot be changed by current user, they have to be changed by a higher authority with permissions to do so, they cannnot be changed by current user.
     */
    private String givenName;

    /**
     * User's last name, family name, or referenced name. May depend on culture how this is used. Has the same constraints as the firstname.
     */
    private String familyName;

    /**
     * The date of birth for the employee. While not required by the system for general use, it can be made required by certain positions that may require users to be over the age of 16/18/21.
     */
    private Date birthDate;

    /**
     * User's e-mail address that they want information sent to. Is changeable by the user. It is highly recommended that this be set.
     */
    private String email;

    /**
     * Name that is entered into the username field when logging into the system; does not reflect personal data such as name or id, while allowing users to communicate with each other in a recognizable format. Cannot be null.
     */
    private String username;

    /**
     * Password for logging onto the system. This is only used when creating a new employee to assign the initial password. All other password verification and changing functions are handled by the employee broker.
     */
    private String password;

    /**
     * The last time at which the employee logged into the system.
     */
    private Timestamp lastLogin;

    /**
     * Position is the job that an Employee prefers to work at. This assumes that multiple positions for work are available. May influence the automatically generated schedule.
     */
    private String prefPosition;

    /**
     * Location refers to the location in the business or company. If more than one locations exist, such as multiple buildings, instances, or groups of working units, this can be specified. Is not required, but if set may influence automatic schedule generation.
     */
    private String prefLocation;

    /**
     * Permission level value that depicts the authority of this Employee over other employees. When a higher level employee makes a decision, it cannot be overruled by one with a lower permission. Basic heirachical permission functionality.
     */
    private int plevel;

    /**
     * Version of a PermissionLevel that depicts having the same authority of the equivalent permission level, but whose job has different permissions and therefore a different goal. Defaults to a space character, or basic version. 
     */
    private char pversion;

    /**
     * Boolean value that represents if the user can access their account; all accounts are saved in the database and can only be deleted when explicitly requested; since some records cannot be deleted (see tax records), employee entries will be kept and searches will generally only return active employees. An exception is when someone with proper permissions wants to browse inactive user, or generate reports on active/inactive users.
     */
    private boolean active;

    /**
     * Users that have a default system assigned password will be notified to change it. 
     */
    private boolean passChanged;

    /**
     * Employees will receive and view notifications that are sent automatically, or manually sent by their supervisor. 
     * @clientCardinality 1
     * @supplierCardinality 0..*
     * @clientQualifier receives
     * @supplierQualifier is sent to
     */
    private Notification lnkNotification;

    /**
     * All employees have an assigned permission set that determines employee-specific permissions within the system regarding what they can and can't access, as well as numerical values relating to time off.
     * @clientCardinality 0..*
     * @supplierCardinality 1
     * @supplierQualifier applies to
     * @clientQualifier has
     */
    private PermissionSet lnkPermissionLevel;

    /**
     * @clientCardinality 0..*
     * @supplierCardinality 1
     * @clientQualifier prefers
     * @supplierQualifier is preferred by 
     */
    private Location lnkLocation;

    /**
     * @supplierCardinality 1..*
     * @clientQualifier has
     * @supplierQualifier applies to
     * @clientCardinality 0..* 
     */
    private Skill lnkSkill;

    /**
     * @clientQualifier prefers
     * @supplierCardinality 1
     * @supplierQualifier preferred by
     * @clientCardinality 0..* 
     */
    private Position lnkPosition;
}
